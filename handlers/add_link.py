from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from fsm.states import RecommendState
from utils.logger import log
import re

from aiogram import F
from aiogram import Router
from aiogram.types import (
    Message,
    CallbackQuery,
)

from storage import in_memory
from utils.tools import extract_phone

link_pattern = re.compile(r'https?://\S+')
phone_pattern = re.compile(r'(\+7|8)\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}')
router = Router()


@router.callback_query(F.data.startswith("addlink|"))
async def handle_add_link(callback: CallbackQuery, state: FSMContext):
    _, uuid = callback.data.split("|")
    in_memory.pending_links[callback.from_user.id] = uuid
    await state.set_state(RecommendState.typing_link)
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@router.message(StateFilter(RecommendState.typing_link), F.text & F.chat.type != "private")
async def handle_link_submission(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in in_memory.pending_links:
        return

    link = message.text.strip()
    if not (link_pattern.search(link) or extract_phone(message)):
        await message.reply("‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    uuid = in_memory.pending_links.pop(user_id)
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ tmp_msg[uuid] –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è UUID {uuid}: {link}")
    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    in_memory.active_editors.pop(uuid, None)
    await state.clear()
    await message.reply("‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ! üíõ")


@router.callback_query(F.data.startswith("cancel|"))
async def handle_cancel(callback: CallbackQuery):
    _, uuid = callback.data.split("|")
    in_memory.pending_links.pop(callback.from_user.id, None)
    in_memory.active_editors.pop(uuid, None)
    await callback.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
