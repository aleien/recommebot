import logging
import re

import gspread
from aiogram import F, Router, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from oauth2client.service_account import ServiceAccountCredentials

from storage import in_memory

router = Router()

phone_pattern = re.compile(r'(\+7|8)\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}')


@router.callback_query(F.data.startswith("save|"))
async def handle_save_callback(callback: CallbackQuery, bot: Bot):
    try:
        _, category, uuid = callback.data.split("|")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
        if uuid in in_memory.active_editors and in_memory.active_editors[uuid] != callback.from_user.id:
            await callback.answer("‚ö†Ô∏è –≠—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.", show_alert=True)
            return

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ ‚Äú—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞‚Äù
        in_memory.active_editors[uuid] = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        orig_msg = in_memory.tmp_msg.pop(uuid)

        if not orig_msg:
            await callback.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–æ)", show_alert=True)
            in_memory.active_editors.pop(uuid, None)
            return

        text = orig_msg.text.lower()
        has_link = list(filter(lambda x: x.type == 'url', orig_msg.entities))
        has_phone = bool(phone_pattern.search(text))
        has_contact = has_link or has_phone

        if not has_contact:
            in_memory.pending_links[callback.from_user.id] = uuid  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"addlink|{uuid}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel|{uuid}")]
                ]
            )
            await callback.message.edit_text(
                "üîó –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:",
                reply_markup=keyboard
            )

            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Sheet, –ë–î –∏ —Ç.–ø.
        name = orig_msg.from_user.username or orig_msg.from_user.first_name
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{name}")
        logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        logging.info(f"–¢–µ–∫—Å—Ç: {orig_msg.text}")

        worksheet = connect_to_gsheet("credentials.json", "mamy2024")
        save_recommendation(
            sheet=worksheet,
            what=f'"{orig_msg.text}"',
            category=category,
            author=name,
            date=orig_msg.date.strftime("%d.%m.%Y"),
            comment=f'"{orig_msg.text}"',
            contact=extract_contact(orig_msg) or "",
            url=f"https://t.me/c/{orig_msg.chat.id}/{orig_msg.message_id}"
        )

        await callback.message.edit_text("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=None)
        in_memory.active_editors.pop(uuid, None)

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n\nüí¨ <i>{orig_msg.text}</i>\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É: {e}", exc_info=True)

    except Exception as error:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {error}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


def connect_to_gsheet(json_keyfile_path: str, sheet_name: str):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = ServiceAccountCredentials.from_json_keyfile_name(json_keyfile_path, scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open(sheet_name)
    return spreadsheet.sheet1


def save_recommendation(sheet, what, category, author, contact, comment, date, url):
    row = [what, category, author, contact, comment, date, url]
    sheet.append_row(row, value_input_option="USER_ENTERED")


def extract_contact(message: Message) -> str:
    link_match = list(filter(lambda x: x.type == 'url', message.entities))
    if link_match:
        return link_match[0].extract_from(message.text)

    phone_match = phone_pattern.search(message.text)
    if phone_match:
        return phone_match.group(0)

    return ""
