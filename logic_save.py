import asyncio
import os
import re

import gspread
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from oauth2client.service_account import ServiceAccountCredentials

from fsm.states import ManualRecommend
from keyboards.build_category_keyboard import build_category_keyboard
from utils.exceptions import EditorConflict
from utils.tools import generate_uuid, extract_link, extract_phone

from storage import in_memory
from utils.logger import log

phone_pattern = re.compile(r'(\+7|8)\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}')


async def manual_recommendation(message: Message, bot: Bot, state: FSMContext):
    if message.chat.type == "private":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
        return

    message_text = message.text.lower()
    await reply_category(bot, message, message_text, state)


async def check_recommendation(message: Message, bot: Bot, state: FSMContext):
    if message.chat.type == "private":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
        return

    message_text = message.text.lower()
    if extract_link(message) or bool(extract_phone(text=message_text)):
        await reply_category(bot, message, message_text, state)


async def reply_category(bot, message, message_text, state):
    log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {message_text}")
    uuid = generate_uuid(message.chat.id, message.message_id)
    in_memory.tmp_msg[uuid] = message
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = build_category_keyboard(uuid)
    await state.set_state(ManualRecommend.selecting_category)
    reply_msg = await message.reply(
        "üëÄ –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await asyncio.sleep(60)  # –∂–¥—ë–º 60 —Å–µ–∫—É–Ω–¥
    log.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id: {reply_msg.message_id}")
    await bot.delete_message(chat_id=reply_msg.chat.id, message_id=reply_msg.message_id)


async def save_manual(bot: Bot, category, uuid, from_user_id, answer_func, edit_func):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
        if uuid in in_memory.active_editors and in_memory.active_editors[uuid] != from_user_id:
            await answer_func("‚ö†Ô∏è –≠—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.", show_alert=True)
            return

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ ‚Äú—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞‚Äù
        in_memory.active_editors[uuid] = from_user_id

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        orig_msg = in_memory.tmp_msg.pop(uuid)

        if not orig_msg:
            await answer_func("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–æ)", show_alert=True)
            in_memory.active_editors.pop(uuid, None)
            return

        name = orig_msg.from_user.username or orig_msg.from_user.first_name
        log.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{name}")
        log.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        log.info(f"–¢–µ–∫—Å—Ç: {orig_msg.text}")

        await save_recommendation(category, name, orig_msg, uuid)

        await edit_func("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=None)
        in_memory.active_editors.pop(uuid, None)

        await send_pm(bot, category, from_user_id, orig_msg)
    except Exception as error:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {error}", exc_info=True)
        await answer_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)

def check_is_edited(uuid: str, from_user_id: str):
    is_edited = uuid in in_memory.active_editors
    is_current_editor = in_memory.active_editors[uuid] == from_user_id
    if is_edited and not is_current_editor:
        raise EditorConflict("‚ö†Ô∏è –≠—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.")


async def save(bot: Bot, category, uuid, from_user_id, answer_func, edit_func):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
        if uuid in in_memory.active_editors and in_memory.active_editors[uuid] != from_user_id:
            await answer_func("‚ö†Ô∏è –≠—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫.", show_alert=True)
            return

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ ‚Äú—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞‚Äù
        in_memory.active_editors[uuid] = from_user_id

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
        orig_msg = in_memory.tmp_msg.pop(uuid)

        if not orig_msg:
            await answer_func("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É—Å—Ç–∞—Ä–µ–ª–æ)", show_alert=True)
            in_memory.active_editors.pop(uuid, None)
            return

        text = orig_msg.text.lower()
        link = extract_link(orig_msg)
        phone = extract_phone(text=text)
        has_contact = link or phone

        if not has_contact:
            in_memory.pending_links[from_user_id] = uuid  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"addlink|{uuid}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel|{uuid}")]
                ]
            )
            await edit_func(
                "üîó –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç:",
                reply_markup=keyboard
            )

            return

        name = orig_msg.from_user.username or orig_msg.from_user.first_name
        log.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{name}")
        log.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        log.info(f"–¢–µ–∫—Å—Ç: {orig_msg.text}")

        await save_recommendation(category, name, orig_msg, uuid)

        await edit_func("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=None)
        in_memory.active_editors.pop(uuid, None)

        await send_pm(bot, category, from_user_id, orig_msg)
    except Exception as error:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {error}", exc_info=True)
        await answer_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


async def send_pm(bot, category, from_user_id, orig_msg):
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await bot.send_message(
            chat_id=from_user_id,
            text=f"‚úÖ –î–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é:\n\nüí¨ <i>{orig_msg.text}</i>\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>"
        )
    except Exception as e:
        log.warn(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É: {e}", exc_info=True)


async def save_recommendation(category, name, orig_msg, uuid):
    worksheet = connect_to_gsheet(os.path.join(os.path.dirname(__file__), "credentials.json"), str(abs(orig_msg.chat.id)))
    save_to_gsheet(
        sheet=worksheet,
        uuid=uuid,
        what=f'"{orig_msg.text}"',
        category=category,
        author=name,
        date=orig_msg.date.strftime("%d.%m.%Y"),
        comment=f'"{orig_msg.text}"',
        contact=extract_contact(orig_msg),
        url=f"https://t.me/c/{orig_msg.chat.id}/{orig_msg.message_id}"
    )


def connect_to_gsheet(json_keyfile_path: str, sheet_name: str):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    credentials = ServiceAccountCredentials.from_json_keyfile_name(json_keyfile_path, scope)
    client = gspread.authorize(credentials)
    spreadsheet = client.open(sheet_name)
    return spreadsheet.sheet1


def save_to_gsheet(sheet, uuid, what, category, author, contact, comment, date, url):
    row = [uuid, what, category, author, date, contact, comment, url]
    sheet.append_row(row, value_input_option="USER_ENTERED")


def extract_contact(message: Message) -> str:
    link_match = extract_link(message)
    if link_match:
        return link_match

    return extract_phone(text=message.text)
